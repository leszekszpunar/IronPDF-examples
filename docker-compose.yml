version: "3.8"

services:
  ironpdf-service:
    build:
      context: ./IronPDFService
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./test-files:/app/test-files
    networks:
      - pdf-network

  pdfsharp-service:
    build:
      context: ./PdfSharpService
      dockerfile: Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./test-files:/app/test-files
    networks:
      - pdf-network

  python-pdf-service:
    build:
      context: ./PythonPdfService
      dockerfile: Dockerfile
    ports:
      - "5003:5032"
    environment:
      - FLASK_ENV=production
    volumes:
      - ./PythonPdfService:/app
      - ./test-files:/app/test-files
      - /tmp:/tmp
    networks:
      - pdf-network

  nodejs-pdf-service:
    build:
      context: ./NodeJSPdfService
      dockerfile: Dockerfile
    ports:
      - "5033:5033"
    environment:
      - NODE_ENV=production
    volumes:
      - ./test-files:/app/test-files
      - /tmp:/tmp
    networks:
      - pdf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5033/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  go-pdf-service:
    build:
      context: ./GoPdfService
      dockerfile: Dockerfile
    ports:
      - "5034:5034"
    environment:
      - GIN_MODE=release
    volumes:
      - ./GoPdfService:/app
      - ./test-files:/app/test-files
      - /tmp:/tmp
    networks:
      - pdf-network

networks:
  pdf-network:
    driver: bridge
